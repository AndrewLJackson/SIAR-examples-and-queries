install.packages('siar')
open(~/.Rprofile)
intsall.packages('siar')
install.packages('siar')
update.packages()
install.packages('siar')
Sys.setenv(http_proxy=”http://username:password@tcdproxy.tcd.ie:8080″)
Sys.setenv(ftp_proxy="username:password@tcdproxy.tcd.ie:8080″)
Sys.setenv(ftp_proxy="username:password@tcdproxy.tcd.ie:8080")
install.packages('siar')
Sys.setenv(http_proxy="username:password@tcdproxy.tcd.ie:8080")
install.packages('siar')
Sys.setenv(http_proxy="jacksoan:Iroh2011@tcdproxy.tcd.ie:8080")
install.packages('siar')
/Users/andrewjackson/.Rprofile
open(/Users/andrewjackson/.Rprofile)
install.packages('siar')
Sys.setenv(http_proxy="jacksoan:Iroh2011@tcdproxy.tcd.ie:8080")
install.packages('siar')
install.packages('MASS')
sigint
install.packages('siar')
update.packages()
library(siar)
siarmenu()
library(deSolve)
?deSolve
library(siar)
?siar
.Machine$double.eps
55*1.21
?duplicated
a <- c(1:10,10)
duplicated(a)
any(duplicated(a))
any(duplicated(a:10))
any(duplicated(1:10))
5+5
library(siar)
setwd("D:/Alternative My Documents/Andrews Documents/Work/SIAR/R files/SIAR demo")
getwd()
dir()
sources <- read.table("sourcesdemo.txt",header=TRUE)
sources
fix(sources)
sources
consumers <- read.table("geese2demo.txt",header=TRUE)
consumers
corrections <- read.table("correctionsdemo.txt",header=TRUE)
corrections
model1 <- siarmcmcdirichletv4(consumers, sources, corrections, concs)
concs <- 0 # use this line if you dont want to run with concentration dependence
model1 <- siarmcmcdirichletv4(consumers, sources, corrections, concs)
objects()
sources
siarplotdata(model1)
siarplotdata(model1,iso=c(2,1))
andrew <- c(1,3,5,6)
andrew
?siarplotdata
sources
corrections
siarhistograms(model1)
siarproportionbygroupplot(model1,grp=8)
siarproportionbygroupplot
?siarproportionbygroupplot
siarproportionbygroupplot(model1,grp=1)
siarproportionbysourceplot(model1,grp=1)
siarproportionbygroupplot(model1,grp=1)
siarhdrs(model1)
siarplotdata(model1,iso=c(2,1))
siarhistograms(model1,1)
siarmatrixplot(model1)
head(model1$output)
model1$output[1:100,1]
plot(model1$output[,1])
plot(model1$output[,1],type="l")
getwd()
# load the siar library#
library(siar)#
#
# remove any pre-existing and open graphics windows#
graphics.off()#
#
# ------------------------------------------------------------------------------#
# After that bit of house-keeping. Read in the data files.#
# ------------------------------------------------------------------------------#
#
# make sure you set the current directory to the folder in which you put these#
# downloaded files.#
# setwd("D:/Alternative My Documents/Andrews Documents/Work/SIAR/R files/SIAR demo")#
# setwd("C:/SIARdemo")    # for example.#
setwd("/Users/andrewjackson/Dropbox/siar/demo scripts and files/siar scripts")#
#
# read in you source data#
sources <- read.table("sourcesdemo.txt",header=TRUE)#
#
# read in your consumer data#
consumers <- read.table("geese1demo.txt",header=TRUE)#
# alternative dataset comprising only a single group of consumers#
# comment out the line above and replace with this if you want.#
#consumers <- read.table("geese1demo.txt",header=TRUE)#
#
# read in your corrections data#
corrections <- read.table("correctionsdemo.txt",header=TRUE)#
# NB if you dont have any corrections make them zero#
# corrections <- 0#
#
# read in the elemental concentration data#
# see Phillips DL, Koch PL (2002) Incorporating concentration dependence in stable#
# isotope mixing models. Oecologia 130: 114?125. for more details.#
concs <- 0 # use this line if you dont want to run with concentration dependence#
#concs <- read.table("concdepdemo.txt", header=TRUE)#
# ------------------------------------------------------------------------------#
# Thats the data read in... now we can run the model and analyse the results#
# ------------------------------------------------------------------------------#
#
# this line calls the SIAR model for either multiple or single groups#
# of consumers depending on the format of the consumers dataset#
model1 <- siarmcmcdirichletv4(consumers, sources, corrections, concs)#
#
# this line plots the raw isotope data for sources and consumers as a bi-plot.#
# The trophic enrichment factors have been applied to the sources.#
# You will be asked to position a legend on the screen by left clicking.#
siarplotdata(model1,iso=c(2,1))
model1$outputoutputSIARSOLOEXITGRAPHSONLYSHOULDRUNnumisonumsourcesnumdatanumgroupsTITLEPATHconcdepcorrectionssourcestargets
head(model1$output)
head(model1$output[,1:3])
?head
?plot
head(model1$output[,1:3],digits=2)
head(model1$output[,1:4],digits=0)
print(head(model1$output[,1:4]),digits=2)
print(head(model1$output[,1:4]),digits=3)
print(head(model1$output[,1:4]),digits=2)
?print
print(head(model1$output[,1:4]),width=2)
print(head(model1$output[,1:4]),width=1)
print(head(model1$output[,1:4]),width=4)
format(head(model1$output[,1:4]),width=4)
format.class(head(model1$output[,1:4]),width=4)
format(AsIshead(model1$output[,1:4]),width=4)
format(head(model1$output[,1:4]),width=4)
round(head(model1$output[,1:4]),4)
round(head(model1$output[,1:4]),2)
cat(round(head(model1$output[,1:4]),2))
print(round(head(model1$output[,1:4]),2))
siarhistograms(model1)
siarplotdata(model1,iso=c(2,1))
siarhdrs(model1)
siarmatrixplot(model1)
new.output <- cbind(model1$output[,1:2],model1$output[,3]+model1$output[,4])
siarhistograms(new.output)
siardensityplot(new.output)
?siardensityplot
siardensityplot(new.output,labels=c("z","g","b"))
siardensityplot
siardensityplot(new.output,xticklabels=c("zostera","grass","ulva+entero"))
siardensityplot(model1$output)
siardensityplot(model1$output[,1:4])
oad the siar library#
library(siar)#
#
# remove any pre-existing and open graphics windows#
graphics.off()#
#
# ------------------------------------------------------------------------------#
# After that bit of house-keeping. Read in the data files.#
# ------------------------------------------------------------------------------#
#
# make sure you set the current directory to the folder in which you put these#
# downloaded files.#
# setwd("D:/Alternative My Documents/Andrews Documents/Work/SIAR/R files/SIAR demo")#
# setwd("C:/SIARdemo")    # for example.#
setwd("/Users/andrewjackson/Dropbox/siar/demo scripts and files/siar scripts")#
#
# read in you source data#
sources <- read.table("sourcesdemo.txt",header=TRUE)#
#
# read in your consumer data#
consumers <- read.table("geese2demo.txt",header=TRUE)#
# alternative dataset comprising only a single group of consumers#
# comment out the line above and replace with this if you want.#
#consumers <- read.table("geese1demo.txt",header=TRUE)#
#
# read in your corrections data#
corrections <- read.table("correctionsdemo.txt",header=TRUE)#
# NB if you dont have any corrections make them zero#
# corrections <- 0#
#
# read in the elemental concentration data#
# see Phillips DL, Koch PL (2002) Incorporating concentration dependence in stable#
# isotope mixing models. Oecologia 130: 114?125. for more details.#
concs <- 0 # use this line if you dont want to run with concentration dependence#
#concs <- read.table("concdepdemo.txt", header=TRUE)#
# ------------------------------------------------------------------------------#
# Thats the data read in... now we can run the model and analyse the results#
# ------------------------------------------------------------------------------#
#
# this line calls the SIAR model for either multiple or single groups#
# of consumers depending on the format of the consumers dataset#
model1 <- siarmcmcdirichletv4(consumers, sources, corrections, concs)
siarplotdata(model1,iso=c(2,1))
siarproportionbysourceplot(model1,grp=1)
siarproportionbysourceplot(model1,grp=1,main="")
siarproportionbysourceplot(model1,grp=1,title="")
siarproportionbysourceplottionbysourceplottionbygroupplot
siarproportionbysourceplot
siarplotdata
source("/Users/andrewjackson/Dropbox/siar/demo scripts and files/siber scripts/demo.SEA_v2.r")
getwd()
# this demo generates some random data for M consumers based on N samples and#
# constructs a standard ellipse for each based on SEAc and SEA_B#
rm(list = ls())#
library(siar)#
# ------------------------------------------------------------------------------#
# ANDREW - REMOVE THESE LINES WHICH SHOULD BE REDUNDANT#
# change this line#
#setwd("c:/rtemp")#
setwd("/Users/andrewjackson/Dropbox/siar/demo scripts and files/siar scripts")#
# ------------------------------------------------------------------------------#
# now close all currently open windows#
graphics.off()#
# read in some data#
# NB the column names have to be exactly, "group", "x", "y"#
mydata <- read.table("example_ellipse_data.txt",sep="\t",header=T)#
# make the column names availble for direct calling#
attach(mydata)#
# now loop through the data and calculate the ellipses#
ngroups <- length(unique(group))#
# split the isotope data based on group#
spx <- split(x,group)#
spy <- split(y,group)#
# create some empty vectors for recording our metrics#
SEA <- numeric(ngroups)#
SEAc <- numeric(ngroups)#
TA <- numeric(ngroups)#
dev.new()#
plot(x,y,col=group,type="p")#
legend("topright",legend=as.character(paste("Group ",unique(group))),#
        pch=19,col=1:length(unique(group)))#
for (j in unique(group)){#
  # Fit a standard ellipse to the data#
  SE <- standard.ellipse(spx[[j]],spy[[j]],steps=1)#
  # Extract the estimated SEA and SEAc from this object#
  SEA[j] <- SE$SEA#
  SEAc[j] <- SE$SEAc#
  # plot the standard ellipse with d.f. = 2 (i.e. SEAc)#
  # These are plotted here as thick solid lines#
  lines(SE$xSEAc,SE$ySEAc,col=j,lty=1,lwd=3)#
  # Also, for comparison we can fit and plot the convex hull#
  # the convex hull is plotted as dotted thin lines#
  ##
  # Calculate the convex hull for the jth group's isotope values#
  # held in the objects created using split() called spx and spy#
  CH <- convexhull(spx[[j]],spy[[j]])#
  # Extract the area of the convex hull from this object#
  TA[j] <- CH$TA#
  # Plot the convex hull#
  lines(CH$xcoords,CH$ycoords,lwd=1,lty=3)#
}#
# print the area metrics to screen for comparison#
# NB if you are working with real data rather than simulated then you wont be#
# able to calculate the population SEA (pop.SEA)#
# If you do this enough times or for enough groups you will easily see the#
# bias in SEA as an estimate of pop.SEA as compared to SEAc which is unbiased.#
# Both measures are equally variable.#
print(cbind(SEA,SEAc,TA))#
# So far we have fitted the standard ellipses based on frequentist methods#
# and calculated the relevant metrics (SEA and SEAc). Now we turn our attention#
# to producing a Bayesian estimate of the standard ellipse and its area SEA_B#
reps <- 10^4 # the number of posterior draws to make#
# Generate the Bayesian estimates for the SEA for each group using the #
# utility function siber.ellipses#
SEA.B <- siber.ellipses(x,y,group,R=reps)#
# ------------------------------------------------------------------------------#
# Plot out some of the data and results#
# ------------------------------------------------------------------------------#
# Plot the credible intervals for the estimated ellipse areas now#
# stored in the matrix SEA.B#
dev.new()#
siardensityplot(SEA.B,#
  xlab="Group",ylab="Area (permil^2)",#
  main="Different estimates of Standard Ellipse Area (SEA)")#
# and now overlay the other metrics on teh same plot for comparison#
points(1:ngroups,SEAc,pch=15,col="red")#
legend("topright",c("SEAc"),pch=c(15,17),col=c("red","blue"))#
# ------------------------------------------------------------------------------#
# Compare two ellipses for significant differences in SEA#
# ------------------------------------------------------------------------------#
# to test whether Group 1 SEA is smaller than Group 2...#
# you need to calculate the proportion of G1 ellipses that are less #
# than G2#
Pg1.lt.g2 <- sum( SEA.B[,1] < SEA.B[,2] ) / nrow(SEA.B)#
# In this case, all the posterior ellipses for G1 are less than G2 so #
# we can conclude that G1 is smaller than G2 with p approx = 0, and #
# certainly p < 0.0001.#
# and for G1 < G3#
Pg1.lt.g3 <- sum( SEA.B[,1] < SEA.B[,3] ) / nrow(SEA.B)#
# etc...#
# ------------------------------------------------------------------------------#
# To calculate the overlap between two ellipses you can use the following code#
# NB: the degree of overlap is sensitive to the size of ellipse you #
# choose to draw around each group of data. However, regardless of the choice#
# of ellipse, the extent of overlap will range from 0 to 1, with values closer#
# to 1 representing more overlap. So, at worst it is a semi-quantitative #
# measure regardless of extent of the ellipse, but the finer detials and #
# magnitudes of the effect size will be sensitive to this choice.#
##
# Additional coding will be required if you wish to calculate the overlap #
# between ellipses other than those described by SEA or SEAc. #
# ------------------------------------------------------------------------------#
# The overlap between the SEAc for groups 1 and 3 is given by:#
# Fit a standard ellipse to the data#
# NB, I use a small step size to make sure i get more "round" ellipses,#
# as this method is computatonal and based on the discretisation of the#
# ellipse boundaries.#
overlap.G1.G3 <- overlap(spx[[1]],spy[[1]],spx[[3]],spy[[3]],steps=1)#
#-------------------------------------------------------------------------------#
# you can also cacluate the overlap between two of the convex hulls,#
# or indeed any polygon using the code that underlies the overlap() function.#
# fit a hull to the Group 1 data#
hullG1 <- convexhull(spx[[1]],spy[[1]])#
# create a list object of the unique xy coordinates of the hull#
# the first and last entries are coincident for plotting, so ignore the first...#
# hence the code to subset [2:length(hullG1$xcoords)] #
h1 <- list( x = hullG1$xcoords[2:length(hullG1$xcoords)] , y = hullG1$ycoords[2:length(hullG1$xcoords)] )#
# Do the same for the Group 3 data#
hullG3 <- convexhull(spx[[3]],spy[[3]])#
h3 <- list( x = hullG3$xcoords[2:length(hullG3$xcoords)] , y = hullG3$ycoords[2:length(hullG3$xcoords)] )#
# and calculate the overlap using the function in spatstat package.#
hull.overlap.G1.G3 <- overlap.xypolygon(h1,h3)
………gwetwd
getwd()
setwd("/Users/andrewjackson/Dropbox/siar/demo scripts and files/siber scripts")
# now close all currently open windows#
graphics.off()#
# read in some data#
# NB the column names have to be exactly, "group", "x", "y"#
mydata <- read.table("example_ellipse_data.txt",sep="\t",header=T)#
# make the column names availble for direct calling#
attach(mydata)#
# now loop through the data and calculate the ellipses#
ngroups <- length(unique(group))#
# split the isotope data based on group#
spx <- split(x,group)#
spy <- split(y,group)#
# create some empty vectors for recording our metrics#
SEA <- numeric(ngroups)#
SEAc <- numeric(ngroups)#
TA <- numeric(ngroups)#
dev.new()#
plot(x,y,col=group,type="p")#
legend("topright",legend=as.character(paste("Group ",unique(group))),#
        pch=19,col=1:length(unique(group)))#
for (j in unique(group)){#
  # Fit a standard ellipse to the data#
  SE <- standard.ellipse(spx[[j]],spy[[j]],steps=1)#
  # Extract the estimated SEA and SEAc from this object#
  SEA[j] <- SE$SEA#
  SEAc[j] <- SE$SEAc#
  # plot the standard ellipse with d.f. = 2 (i.e. SEAc)#
  # These are plotted here as thick solid lines#
  lines(SE$xSEAc,SE$ySEAc,col=j,lty=1,lwd=3)#
  # Also, for comparison we can fit and plot the convex hull#
  # the convex hull is plotted as dotted thin lines#
  ##
  # Calculate the convex hull for the jth group's isotope values#
  # held in the objects created using split() called spx and spy#
  CH <- convexhull(spx[[j]],spy[[j]])#
  # Extract the area of the convex hull from this object#
  TA[j] <- CH$TA#
  # Plot the convex hull#
  lines(CH$xcoords,CH$ycoords,lwd=1,lty=3)#
}
reps <- 10^4 # the number of posterior draws to make#
# Generate the Bayesian estimates for the SEA for each group using the #
# utility function siber.ellipses#
SEA.B <- siber.ellipses(x,y,group,R=reps)#
# ------------------------------------------------------------------------------#
# Plot out some of the data and results#
# ------------------------------------------------------------------------------#
# Plot the credible intervals for the estimated ellipse areas now#
# stored in the matrix SEA.B#
dev.new()#
siardensityplot(SEA.B,#
  xlab="Group",ylab="Area (permil^2)",#
  main="Different estimates of Standard Ellipse Area (SEA)")#
# and now overlay the other metrics on teh same plot for comparison#
points(1:ngroups,SEAc,pch=15,col="red")#
legend("topright",c("SEAc"),pch=c(15,17),col=c("red","blue"))
rm(list = ls())#
graphics.off()#
library(siar)#
# ------------------------------------------------------------------------------#
# ANDREW - REMOVE THESE LINES WHICH SHOULD BE REDUNDANT#
# change this line#
setwd("c:/rtemp")#
# ------------------------------------------------------------------------------#
# read in some data#
mydata <- read.table("example_layman_data.txt",header=T,sep="\t")#
attach(mydata) # make the names of the columns available for direct calling#
# calculate the Bayesian Layman metrics given data for Isotopes 1 and 2, #
# a grouping variable Group and a number of iterations to use to generate#
# the results#
metrics <- siber.hull.metrics(Iso1,Iso2,Group,R=10^4)#
# ------------------------------------------------------------------------------#
# Plot out some of the data and results#
# ------------------------------------------------------------------------------#
# Plot the raw [simulated in this case] data#
xlabels <- attributes(metrics)$dimnames[[2]]#
# Now lets calculate the convex hull as per the current method based#
# simply on the means for each group#
means.x <- aggregate(Iso1,list(Group),mean)$x#
means.y <- aggregate(Iso2,list(Group),mean)$x#
sample.hull <- convexhull(means.x,means.y)#
M <- max(Group)#
dev.new()#
par(mfrow=c(1,1))#
plot(Iso1,Iso2,col=Group,xlab="Isotope 1", ylab="Isotope 2",#
  pch=1,asp=1,xlim=c(min(Iso1)-2,max(Iso1)+2),ylim=c(min(Iso2)-2,max(Iso2)+2))#
lines(sample.hull$xcoords,sample.hull$ycoords,lty=1,col=1,lwd=2)#
legend("topright",#
  legend=as.character(c(paste("Group ",1:M),"sample hull", "population hull")),#
  pch=c(rep(1,M),NA, NA),col=c(1:M,1,1), lty=c(rep(NA,),1,3))#
# in this example, I plot TA as a histogram seperately to the other#
# metrics as it is usually on a scale so vastly different from the other #
# metrics.#
dev.new()#
par(mfrow=c(1,2))#
hist(metrics[,"TA"],freq=F,xlab="TA",ylab="Density",main="")#
siardensityplot(metrics[,c(1,2,4,5,6)],#
      xticklabels=xlabels[c(1,2,4,5,6)],#
      ylims=c(0,25),ylab="units",xlab="Metric")#
detach(mydata)
dev.new()#
par(mfrow=c(1,1))#
plot(Iso1,Iso2,col=Group,xlab="Isotope 1", ylab="Isotope 2",#
  pch=1,asp=1,xlim=c(min(Iso1)-2,max(Iso1)+2),ylim=c(min(Iso2)-2,max(Iso2)+2))#
lines(sample.hull$xcoords,sample.hull$ycoords,lty=1,col=1,lwd=2)#
legend("topright",#
  legend=as.character(c(paste("Group ",1:M),"sample hull", "population hull")),#
  pch=c(rep(1,M),NA, NA),col=c(1:M,1,1), lty=c(rep(NA,),1,3))
# Plot the raw [simulated in this case] data#
xlabels <- attributes(metrics)$dimnames[[2]]#
# Now lets calculate the convex hull as per the current method based#
# simply on the means for each group#
means.x <- aggregate(Iso1,list(Group),mean)$x#
means.y <- aggregate(Iso2,list(Group),mean)$x#
sample.hull <- convexhull(means.x,means.y)#
M <- max(Group)#
dev.new()#
par(mfrow=c(1,1))#
plot(Iso1,Iso2,col=Group,xlab="Isotope 1", ylab="Isotope 2",#
  pch=1,asp=1,xlim=c(min(Iso1)-2,max(Iso1)+2),ylim=c(min(Iso2)-2,max(Iso2)+2))#
lines(sample.hull$xcoords,sample.hull$ycoords,lty=1,col=1,lwd=2)#
legend("topright",#
  legend=as.character(c(paste("Group ",1:M),"sample hull", "population hull")),#
  pch=c(rep(1,M),NA, NA),col=c(1:M,1,1), lty=c(rep(NA,),1,3))
attach(mydata)
# Plot the raw [simulated in this case] data#
xlabels <- attributes(metrics)$dimnames[[2]]#
# Now lets calculate the convex hull as per the current method based#
# simply on the means for each group#
means.x <- aggregate(Iso1,list(Group),mean)$x#
means.y <- aggregate(Iso2,list(Group),mean)$x#
sample.hull <- convexhull(means.x,means.y)#
M <- max(Group)#
dev.new()#
par(mfrow=c(1,1))#
plot(Iso1,Iso2,col=Group,xlab="Isotope 1", ylab="Isotope 2",#
  pch=1,asp=1,xlim=c(min(Iso1)-2,max(Iso1)+2),ylim=c(min(Iso2)-2,max(Iso2)+2))#
lines(sample.hull$xcoords,sample.hull$ycoords,lty=1,col=1,lwd=2)#
legend("topright",#
  legend=as.character(c(paste("Group ",1:M),"sample hull", "population hull")),#
  pch=c(rep(1,M),NA, NA),col=c(1:M,1,1), lty=c(rep(NA,),1,3))
x
x<-seq(-2,2,length=10^3)
plot(x,dnorm(x),type)
plot(x,dnorm(x),type="l")
plot(x,dnorm(x),type="l",bty="L")
plot(x,dnorm(x),type="l",bty="L",lwd="3")
plot(x,dnorm(x),type="l",bty="L",lwd="5")
